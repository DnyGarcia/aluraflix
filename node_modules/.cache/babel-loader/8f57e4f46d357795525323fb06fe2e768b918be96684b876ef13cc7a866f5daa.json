{"ast":null,"code":"\"use strict\";\n\nvar removeHash = function removeHash(hex) {\n  return hex.charAt(0) === '#' ? hex.slice(1) : hex;\n};\nvar parseHex = function parseHex(nakedHex) {\n  var isShort = nakedHex.length === 3 || nakedHex.length === 4;\n  var twoDigitHexR = isShort ? \"\".concat(nakedHex.slice(0, 1)).concat(nakedHex.slice(0, 1)) : nakedHex.slice(0, 2);\n  var twoDigitHexG = isShort ? \"\".concat(nakedHex.slice(1, 2)).concat(nakedHex.slice(1, 2)) : nakedHex.slice(2, 4);\n  var twoDigitHexB = isShort ? \"\".concat(nakedHex.slice(2, 3)).concat(nakedHex.slice(2, 3)) : nakedHex.slice(4, 6);\n  var twoDigitHexA = (isShort ? \"\".concat(nakedHex.slice(3, 4)).concat(nakedHex.slice(3, 4)) : nakedHex.slice(6, 8)) || 'ff'; // const numericA = +((parseInt(a, 16) / 255).toFixed(2));\n\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA\n  };\n};\nvar hexToDecimal = function hexToDecimal(hex) {\n  return parseInt(hex, 16);\n};\nvar hexesToDecimals = function hexesToDecimals(_ref) {\n  var r = _ref.r,\n    g = _ref.g,\n    b = _ref.b,\n    a = _ref.a;\n  return {\n    r: hexToDecimal(r),\n    g: hexToDecimal(g),\n    b: hexToDecimal(b),\n    a: +(hexToDecimal(a) / 255).toFixed(2)\n  };\n};\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}; // eslint-disable-line no-restricted-globals, max-len\n\nvar formatRgb = function formatRgb(decimalObject, parameterA) {\n  var r = decimalObject.r,\n    g = decimalObject.g,\n    b = decimalObject.b,\n    parsedA = decimalObject.a;\n  var a = isNumeric(parameterA) ? parameterA : parsedA;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n};\n/**\n * Turns an old-fashioned css hex color value into a rgb color value.\n *\n * If you specify an alpha value, you'll get a rgba() value instead.\n *\n * @param The hex value to convert. ('123456'. '#123456', ''123', '#123')\n * @param An alpha value to apply. (optional) ('0.5', '0.25')\n * @return An rgb or rgba value. ('rgb(11, 22, 33)'. 'rgba(11, 22, 33, 0.5)')\n */\n\nvar hexToRgba = function hexToRgba(hex, a) {\n  var hashlessHex = removeHash(hex);\n  var hexObject = parseHex(hashlessHex);\n  var decimalObject = hexesToDecimals(hexObject);\n  return formatRgb(decimalObject, a);\n};\nmodule.exports = hexToRgba;","map":{"version":3,"names":["removeHash","hex","charAt","slice","parseHex","nakedHex","isShort","length","twoDigitHexR","concat","twoDigitHexG","twoDigitHexB","twoDigitHexA","r","g","b","a","hexToDecimal","parseInt","hexesToDecimals","_ref","toFixed","isNumeric","n","isNaN","parseFloat","isFinite","formatRgb","decimalObject","parameterA","parsedA","hexToRgba","hashlessHex","hexObject","module","exports"],"sources":["/home/dnygarcia/Documentos/ONE/FRONTEND/REACT/org/node_modules/hex-to-rgba/build/index.js"],"sourcesContent":["\"use strict\";\n\nvar removeHash = function removeHash(hex) {\n  return hex.charAt(0) === '#' ? hex.slice(1) : hex;\n};\n\nvar parseHex = function parseHex(nakedHex) {\n  var isShort = nakedHex.length === 3 || nakedHex.length === 4;\n  var twoDigitHexR = isShort ? \"\".concat(nakedHex.slice(0, 1)).concat(nakedHex.slice(0, 1)) : nakedHex.slice(0, 2);\n  var twoDigitHexG = isShort ? \"\".concat(nakedHex.slice(1, 2)).concat(nakedHex.slice(1, 2)) : nakedHex.slice(2, 4);\n  var twoDigitHexB = isShort ? \"\".concat(nakedHex.slice(2, 3)).concat(nakedHex.slice(2, 3)) : nakedHex.slice(4, 6);\n  var twoDigitHexA = (isShort ? \"\".concat(nakedHex.slice(3, 4)).concat(nakedHex.slice(3, 4)) : nakedHex.slice(6, 8)) || 'ff'; // const numericA = +((parseInt(a, 16) / 255).toFixed(2));\n\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA\n  };\n};\n\nvar hexToDecimal = function hexToDecimal(hex) {\n  return parseInt(hex, 16);\n};\n\nvar hexesToDecimals = function hexesToDecimals(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b,\n      a = _ref.a;\n  return {\n    r: hexToDecimal(r),\n    g: hexToDecimal(g),\n    b: hexToDecimal(b),\n    a: +(hexToDecimal(a) / 255).toFixed(2)\n  };\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}; // eslint-disable-line no-restricted-globals, max-len\n\n\nvar formatRgb = function formatRgb(decimalObject, parameterA) {\n  var r = decimalObject.r,\n      g = decimalObject.g,\n      b = decimalObject.b,\n      parsedA = decimalObject.a;\n  var a = isNumeric(parameterA) ? parameterA : parsedA;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n};\n/**\n * Turns an old-fashioned css hex color value into a rgb color value.\n *\n * If you specify an alpha value, you'll get a rgba() value instead.\n *\n * @param The hex value to convert. ('123456'. '#123456', ''123', '#123')\n * @param An alpha value to apply. (optional) ('0.5', '0.25')\n * @return An rgb or rgba value. ('rgb(11, 22, 33)'. 'rgba(11, 22, 33, 0.5)')\n */\n\n\nvar hexToRgba = function hexToRgba(hex, a) {\n  var hashlessHex = removeHash(hex);\n  var hexObject = parseHex(hashlessHex);\n  var decimalObject = hexesToDecimals(hexObject);\n  return formatRgb(decimalObject, a);\n};\n\nmodule.exports = hexToRgba;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}